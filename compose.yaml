# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

secrets:
 # nom arbitraire donné à un secret
  db-password:
    # à gauche, type de secret,
    # à droite, chemin vers le fichier contenant le secret sur votre machine
    # ! vous voulez git ignorer les secrets
    file: db/password.txt

# les volumes sont les espaces disque sur votre machine,
# dans lesquels vous voulez persister les données de vos containers
volumes:
  # le nom du volume est totalement arbitraire;
  # on veut mettre dans ce volume les données de la base de données
  db-data:

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# les services de votre système constituent une "application stack";
# dans le cadre de docker compose, un "container" est un "service"
services:

  # tous les services ont un nom et sont découvrables entre eux,
  # parc ce nom (DNS dans Docker)

  server:
    build:
      dockerfile: Dockerfile
      context: .
    ports:
      - 9000:80
    # `depends_on` signifie qu'on éteind le serveur PHP,
    # si la base de données ne passe pas le healthcheck
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
    environment:
      - PASSWORD_FILE_PATH=/run/secrets/db-password
      # on ne met pas `localhost` ici car on ne fait pas tourner,
      # le serveur de base de données sur ce container
      - DB_HOST=db
      - DB_NAME=example
      - DB_USER=root

  db:
    image: mariadb
    restart: always
    # user Linux à l'intérieur du container
    user: root
    secrets:
      - db-password
    volumes:
      # named volume: on donne un nom arbitraire à un volume;
      # Docker qui se charge auto du management de ce volume;
      # le chemin dans le container dépend entièrement de l'image utilisée
      - db-data:/var/lib/mysql
      
      # syntaxe ci-dessous pour un "bind mount";
      # vous avez le contrôle sur où la donnée persistée est stockée
      # - ./mon-dossier:/var/lib/mysql
      # le chemin `/run/secrets` est commun à tous les services/containers Docker dès lors qu'on utilise des secrets
    environment:
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db-password
      - MARIADB_DATABASE=example
    # utiliser `expose` ici spécifie que vous voulez rendre ce port disponible pour les atures services de l'application stack
    expose:
      - 3306
    healthcheck:
      test:  ["CMD", "/usr/local/bin/healthcheck.sh", "--su-mysql", "--connect",  "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
